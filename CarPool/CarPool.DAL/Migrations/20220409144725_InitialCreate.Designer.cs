// <auto-generated />
using System;
using CarPool.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarPool.DAL.Migrations
{
    [DbContext(typeof(CarPoolDbContext))]
    [Migration("20220409144725_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CarPool.DAL.Entities.CarEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FirstRegistration")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Seats")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3a8490b2-3bd3-410d-a513-6340699e9fa5"),
                            FirstRegistration = new DateTime(2000, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "",
                            Manufacturer = "Fiat",
                            OwnerId = new Guid("06a8a2cf-ea03-4095-a3e4-aa0291fe9c75"),
                            Seats = 5,
                            Type = "Multipla"
                        },
                        new
                        {
                            Id = new Guid("7d33c854-2b3a-4b4e-8b7c-a340803977ad"),
                            FirstRegistration = new DateTime(2000, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "",
                            Manufacturer = "renault",
                            OwnerId = new Guid("ac3d462e-8da6-46ab-b156-30688e44917a"),
                            Seats = 5,
                            Type = "laguna"
                        });
                });

            modelBuilder.Entity("CarPool.DAL.Entities.NumberOfRidesEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RideId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RideId");

                    b.HasIndex("UserId");

                    b.ToTable("NumberOfRides");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1422ca21-c6ff-413e-8070-fa8a896a1f8d"),
                            RideId = new Guid("5d38c1dd-0cf1-42cd-925c-5e8dea737a2a"),
                            UserId = new Guid("ac3d462e-8da6-46ab-b156-30688e44917a")
                        },
                        new
                        {
                            Id = new Guid("b5bf3a8e-c312-4dda-9d1f-9f6fd68e7c31"),
                            RideId = new Guid("5d38c1dd-0cf1-42cd-925c-5e8dea737a2a"),
                            UserId = new Guid("ced8bfbb-93ee-49f2-a0c6-df9b920e861a")
                        });
                });

            modelBuilder.Entity("CarPool.DAL.Entities.RideEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EndLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("StartLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UsedCarId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("UsedCarId");

                    b.ToTable("Rides");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5d38c1dd-0cf1-42cd-925c-5e8dea737a2a"),
                            DriverId = new Guid("06a8a2cf-ea03-4095-a3e4-aa0291fe9c75"),
                            EndLocation = "Misto B",
                            EndTime = new DateTime(2000, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartLocation = "Misto A",
                            StartTime = new DateTime(2000, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UsedCarId = new Guid("3a8490b2-3bd3-410d-a513-6340699e9fa5")
                        });
                });

            modelBuilder.Entity("CarPool.DAL.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("06a8a2cf-ea03-4095-a3e4-aa0291fe9c75"),
                            ImageUrl = "",
                            Name = "martin",
                            Surname = "novák",
                            UserName = "pac"
                        },
                        new
                        {
                            Id = new Guid("ac3d462e-8da6-46ab-b156-30688e44917a"),
                            ImageUrl = "",
                            Name = "josef",
                            Surname = "malý",
                            UserName = "man"
                        },
                        new
                        {
                            Id = new Guid("ced8bfbb-93ee-49f2-a0c6-df9b920e861a"),
                            ImageUrl = "",
                            Name = "Jakub",
                            Surname = "Vlk",
                            UserName = "banan"
                        });
                });

            modelBuilder.Entity("CarPool.DAL.Entities.CarEntity", b =>
                {
                    b.HasOne("CarPool.DAL.Entities.UserEntity", "Owner")
                        .WithMany("CarsOwned")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CarPool.DAL.Entities.NumberOfRidesEntity", b =>
                {
                    b.HasOne("CarPool.DAL.Entities.RideEntity", "Ride")
                        .WithMany("Passengers")
                        .HasForeignKey("RideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarPool.DAL.Entities.UserEntity", "User")
                        .WithMany("RidesTaking")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ride");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarPool.DAL.Entities.RideEntity", b =>
                {
                    b.HasOne("CarPool.DAL.Entities.UserEntity", "Driver")
                        .WithMany("Offering")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarPool.DAL.Entities.CarEntity", "UsedCar")
                        .WithMany("RidesUsedFor")
                        .HasForeignKey("UsedCarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("UsedCar");
                });

            modelBuilder.Entity("CarPool.DAL.Entities.CarEntity", b =>
                {
                    b.Navigation("RidesUsedFor");
                });

            modelBuilder.Entity("CarPool.DAL.Entities.RideEntity", b =>
                {
                    b.Navigation("Passengers");
                });

            modelBuilder.Entity("CarPool.DAL.Entities.UserEntity", b =>
                {
                    b.Navigation("CarsOwned");

                    b.Navigation("Offering");

                    b.Navigation("RidesTaking");
                });
#pragma warning restore 612, 618
        }
    }
}
